name: Python CI

on:
  push:
    branches: [ master, main ]
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (with pybroker fallback stub)
        shell: bash
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest mlflow optuna openai pandas pyarrow
          if ! pip install pybroker; then
            echo "pybroker wheel not found for this runner. Using CI stub."
            mkdir -p ci_vendor/pybroker
            printf "%s\n" "# CI stub for pybroker (imports only). Real package is used locally." > ci_vendor/pybroker/__init__.py
            echo "PYTHONPATH=$PWD/ci_vendor:$PYTHONPATH" >> $GITHUB_ENV
          fi

      - name: Set test environment + quick diag
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PYTHONWARNINGS: ignore
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH" >> $GITHUB_ENV
          python -c "import os,sys,platform; print('Python:', sys.version); print('Platform:', platform.platform()); print('OPENAI set:', bool(os.getenv('OPENAI_API_KEY')))"

      # -------- Sanitize error_handling.py without heredocs ----------
      - name: Sanitize source encodings (remove null bytes)
        shell: bash
        run: |
          mkdir -p scripts
          cat > scripts/sanitize.py << 'EOF'
import pathlib
p = pathlib.Path("companion/error_handling.py")
if p.exists():
    b = p.read_bytes()
    nulls = b.count(b"\x00")
    print("error_handling.py null bytes BEFORE:", nulls)
    if nulls:
        try:
            text = b.decode("utf-16")
        except Exception:
            text = b.decode("utf-8", "ignore").replace("\x00", "")
        p.write_text(text, encoding="utf-8")
        print("Sanitized error_handling.py to UTF-8")
# purge pyc caches
for d in pathlib.Path(".").rglob("__pycache__"):
    for q in d.iterdir():
        try:
            q.unlink()
        except Exception:
            pass
    try:
        d.rmdir()
    except Exception:
        pass
print("Sanitize step done.")
EOF
          python scripts/sanitize.py
      # ----------------------------------------------------------------

      - name: Run tests (verbose) and collect reports
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          mkdir -p artifacts/_ci
          pytest -vv -rA --durations=25 --maxfail=1 | tee artifacts/_ci/pytest-output.txt
          status=${PIPESTATUS[0]}
          if [ -d artifacts/_quarantine ]; then cp -r artifacts/_quarantine artifacts/_ci/_quarantine; fi
          if [ -f companion/explorer/llm_logs.json ]; then cp companion/explorer/llm_logs.json artifacts/_ci/; fi
          if [ -d logs ]; then cp -r logs artifacts/_ci/logs; fi
          exit $status

      - name: Upload CI artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            artifacts/_ci
            .pytest_cache
            **/*.log
